#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

#
# See the following for details:
#
#  http://linux.die.net/man/8/apt-get
#  http://manpages.ubuntu.com/manpages/wily/man8/apt-key.8.html
#  https://github.com/rocker-org/rocker/blob/86262e0f3bdc048082cbeed36e85fe17263ef7a5/r-base/Dockerfile
#

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

KEYS_FILE="$BUILD_DIR/Aptfile.keys"
SOURCES_FILE="$BUILD_DIR/Aptfile.sources"

# export the current apt keys
gpg --keyring /etc/apt/trusted.gpg --export -o keys 2>&1 | indent

# create a new keyring and import apt keys
gpg --import keys 2>&1 | indent

# additional keys provided?
if [[ -f "$KEYS_FILE" ]]; then

  topic "Building keyring"
  for KEY in $(cat $KEYS_FILE); do
    IFS=: read keyserver recvkey <<< $KEY
    gpg --keyserver $keyserver --recv-key $recvkey 2>&1 | indent
  done

  unset IFS # ensure default
fi

# copy over existing sources
cat /etc/apt/sources.list > $CACHE_DIR/sources.list

# additional sources provided?
if [[ -f "$SOURCES_FILE" ]]; then

  topic "Adding additional package sources"
  echo >> $CACHE_DIR/sources.list
  cat $SOURCES_FILE >> $CACHE_DIR/sources.list

fi

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR -o dir::etc::sourcelist=$CACHE_DIR/sources.list"
KEYRING="-o dir::etc::trusted=/app/.gnupg/pubring.gpg"

topic "Updating apt caches"
apt-get $APT_OPTIONS $KEYRING update | indent

PACKAGES=""
while IFS='' read -r PACKAGE || [[ -n "$PACKAGE" ]]; do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    PACKAGES="$PACKAGES $PACKAGE"
  fi
done < "$BUILD_DIR/Aptfile"

topic "Fetching .debs for $PACKAGES"
apt-get $APT_OPTIONS $KEYRING -y --force-yes -d install --reinstall $PACKAGES | indent

mkdir -p /app/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB /app/.apt
done

#
# HACK: emulate an actual install and run the postinst script
#
topic "Running post installation scripts"
mkdir -p /app/.apt/etc/alternatives
mkdir -p /app/.apt/var/lib/dpkg/alternatives
for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do

  rm -rf "$LP_DIR/control"
  # extract the control files to the current directory
  dpkg-deb -e $DEB "$LP_DIR/control"
  pushd "$LP_DIR/control" > /dev/null
  if [[ -f "postinst" ]]; then

    # fix up paths
    sed -i 's/\/usr/\/app\/.apt\/usr/g' postinst

    # append --log if update-alternatives present
    sed -i 's/update-alternatives /update-alternatives --altdir \/app\/.apt\/etc\/alternatives --admindir \/app\/.apt\/var\/lib\/dpkg\/alternatives --log update-alternatives.log /g' postinst

    # run the post installation script
    /bin/bash postinst configure | indent || echo "FAILED: postinst failure for $DEB" | indent
    echo | indent
  fi;
  popd > /dev/null

done;

# copy /app to BUILD_DIR for slug packaging
mkdir -p "$BUILD_DIR/.apt"
cp -r /app/.apt/* "$BUILD_DIR/.apt"

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

# give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"
